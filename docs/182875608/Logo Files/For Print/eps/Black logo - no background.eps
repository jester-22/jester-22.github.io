%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2380 736
%%HiResBoundingBox: 0 0 2379.1199 735.12
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2379.1199 735.12 re
W
q
[0.24 0 0 -0.24 0 735.12] cm
q
0 0 9912.5 3062.5 re
W*
q
[4.310368 0 0 4.311305 269.16791 269.16913] cm
266.39999 586.20001 m
129 573.20001 21.1 457.10001 21.1 316.29999 c
21.1 166.899994 142.699997 45.299988 292.10001 45.299988 c
432.90002 45.299988 548.90002 153.199982 561.90002 290.59998 c
531.90002 194.89998 442.30002 125.199982 336.80002 125.199982 c
206.8 125.300003 101 231 101 361.10001 c
101 466.60001 170.7 556.09998 266.39999 586.20001 c
h
f
336.89999 569.40002 m
223.39999 569.40002 130.899994 478.30002 128.599991 365.30002 c
149.699997 435.60004 215.09999 487 292.20001 487 c
386.30002 487 462.90002 410.39999 462.90002 316.20001 c
462.90002 239.10001 411.50003 173.80002 341.20001 152.600006 c
454.10001 154.900009 545.30005 247.5 545.30005 360.90002 c
545.30005 405.00003 531.70007 447.10004 505.90005 482.80002 c
492.30005 500.30002 476.20004 516.30005 458.40005 530.20001 c
423.10001 555.79999 380.89999 569.40002 336.89999 569.40002 c
h
f
106.800003 53.400002 m
106.800003 55.148918 106.714294 56.893623 106.54287 58.634117 c
106.371445 60.374611 106.115128 62.102512 105.773926 63.817818 c
105.432732 65.533134 105.008301 67.2276 104.500618 68.901207 c
103.992928 70.574814 103.404442 72.219505 102.735153 73.835289 c
102.06588 75.45108 101.319023 77.030174 100.494583 78.572578 c
99.670151 80.114983 98.77211 81.613274 97.800461 83.067444 c
96.828819 84.521622 95.788254 85.924675 94.678749 87.276611 c
93.56926 88.62854 92.396172 89.922836 91.159492 91.159508 c
89.922829 92.396179 88.628532 93.569267 87.276596 94.678764 c
85.92466 95.788269 84.521606 96.828835 83.067436 97.800476 c
81.613266 98.772125 80.114983 99.670166 78.572571 100.494598 c
77.030167 101.319031 75.451073 102.065887 73.835281 102.735161 c
72.219498 103.404449 70.574799 103.992935 68.901192 104.500618 c
67.227585 105.008301 65.533127 105.432732 63.817818 105.773926 c
62.102512 106.115128 60.374611 106.371445 58.634117 106.54287 c
56.893623 106.714294 55.148918 106.800003 53.400002 106.800003 c
51.651085 106.800003 49.90638 106.714294 48.16589 106.54287 c
46.425392 106.371445 44.697491 106.115128 42.982178 105.773926 c
41.266865 105.432732 39.572407 105.008301 37.898796 104.500618 c
36.225185 103.992928 34.58049 103.404442 32.964703 102.735153 c
31.348917 102.06588 29.769819 101.319023 28.227413 100.494583 c
26.685007 99.670151 25.18672 98.77211 23.732548 97.800461 c
22.278379 96.828819 20.875328 95.788254 19.523397 94.678749 c
18.171467 93.56926 16.877167 92.396172 15.640497 91.159492 c
14.403828 89.922829 13.230743 88.628532 12.121241 87.276596 c
11.011741 85.92466 9.971168 84.521606 8.999521 83.067436 c
8.027876 81.613266 7.129837 80.114983 6.305404 78.572571 c
5.480971 77.030167 4.734114 75.451073 4.064832 73.835281 c
3.395551 72.219498 2.807069 70.574799 2.299386 68.901192 c
1.791702 67.227585 1.367262 65.533127 1.026066 63.817818 c
0.684869 62.102512 0.428559 60.374611 0.257136 58.634117 c
0.085712 56.893623 0 55.148918 0 53.400002 c
0 51.651085 0.085712 49.90638 0.257136 48.16589 c
0.428559 46.425392 0.684869 44.697491 1.026066 42.982178 c
1.367262 41.266865 1.791702 39.572407 2.299386 37.898796 c
2.807069 36.225185 3.395551 34.58049 4.064832 32.964703 c
4.734114 31.348917 5.480971 29.769819 6.305404 28.227413 c
7.129837 26.685007 8.027876 25.18672 8.999521 23.732548 c
9.971168 22.278379 11.011741 20.875328 12.121241 19.523397 c
13.230743 18.171467 14.403828 16.877167 15.640497 15.640497 c
16.877167 14.403828 18.171467 13.230743 19.523397 12.121241 c
20.875328 11.011741 22.278378 9.971168 23.732546 8.999521 c
25.186718 8.027876 26.685007 7.129837 28.227413 6.305404 c
29.769819 5.480971 31.348917 4.734114 32.964703 4.064832 c
34.58049 3.395551 36.225185 2.807069 37.898796 2.299386 c
39.572403 1.791702 41.266861 1.367262 42.982174 1.026066 c
44.697487 0.684869 46.425392 0.428559 48.16589 0.257136 c
49.90638 0.085712 51.651085 0 53.400002 0 c
55.148918 0 56.893623 0.085712 58.634117 0.257136 c
60.374611 0.428559 62.102512 0.684869 63.817818 1.026066 c
65.533134 1.367262 67.2276 1.791702 68.901207 2.299386 c
70.574814 2.807069 72.219505 3.395551 73.835289 4.064832 c
75.45108 4.734114 77.030174 5.480971 78.572578 6.305404 c
80.114983 7.129837 81.613274 8.027876 83.067444 8.999521 c
84.521622 9.971168 85.924675 11.011741 87.276611 12.121241 c
88.62854 13.230743 89.922836 14.403828 91.159508 15.640497 c
92.396179 16.877167 93.569267 18.171467 94.678764 19.523397 c
95.788269 20.875328 96.828835 22.278378 97.800476 23.732546 c
98.772125 25.186718 99.670166 26.685007 100.494598 28.227413 c
101.319031 29.769819 102.065887 31.348917 102.735161 32.964703 c
103.404449 34.58049 103.992935 36.225185 104.500618 37.898796 c
105.008301 39.572403 105.432732 41.266861 105.773926 42.982174 c
106.115128 44.697487 106.371445 46.425392 106.54287 48.16589 c
106.714294 49.90638 106.800003 51.651085 106.800003 53.400002 c
h
f
367.89999 346.89999 m
390.39999 346.89999 408.60001 365.10001 408.60001 387.60001 c
408.60001 410.10001 390.39999 428.30002 367.89999 428.30002 c
345.39999 428.30002 327.19998 410.10001 327.19998 387.60001 c
327.20001 365.10001 345.39999 346.89999 367.89999 346.89999 c
h
f
Q
q
[71.446999 0 0 71.462524 3138.5825 589.46954] cm
12.237 6.441 m
12.389541 6.441 12.474291 6.508963 12.474291 6.66151 c
12.474291 19.78051 l
12.474291 19.9161 12.406494 20.000679 12.270901 20.000679 c
11.593101 20.000679 l
11.28802 20.000679 11.152421 19.81424 11.152421 19.543049 c
11.152421 13.983749 l
2.593121 13.983749 l
2.593121 19.763449 l
2.593121 19.915989 2.525324 20.000568 2.372781 20.000568 c
1.508371 20.000568 l
1.338711 20.000568 1.270911 19.915989 1.270911 19.763449 c
1.270911 6.661449 l
1.270911 6.508908 1.338707 6.441109 1.491251 6.441109 c
2.372611 6.441109 l
2.508201 6.441109 2.592951 6.508906 2.592951 6.661449 c
2.592951 12.661449 l
11.152251 12.661449 l
11.152251 6.661449 l
11.152251 6.508908 11.220048 6.441109 11.355641 6.441109 c
12.237001 6.441109 l
12.237 6.441 l
h
f
Q
q
[12.10998 0 0 12.112612 4050.1724 928.63348] cm
50 10 m
10 90 l
90 90 l
50 10 l
h
50 24.909 m
72.545998 70 l
42.360001 70 l
45.693001 63.333 l
61.757 63.333 l
50 39.813999 l
31.575001 76.667 l
75.878998 76.667 l
79.211998 83.333 l
20.788 83.333 l
50 24.909 l
h
f
Q
q
[71.006592 0 0 71.022018 5190.3916 592.32245] cm
6.61 6.441 m
9.4236 6.441 11.271 8.9834 11.271 11.0681 c
11.271 13.3054 9.4235 15.7291 6.61 15.7291 c
3.61 15.7291 l
3.61 19.661301 l
3.61 19.864691 3.47441 20.000111 3.28797 20.000111 c
1.49137 20.000111 l
1.32188 20.000111 1.18629 19.864681 1.18629 19.661301 c
1.18629 6.763301 l
1.18629 6.593811 1.32188 6.441271 1.50832 6.441271 c
6.61002 6.441271 l
6.61 6.441 l
h
6.3558 13.39 m
7.949 13.39 8.8473 12.220301 8.8473 11.067801 c
8.8473 9.932401 7.948989 8.7798 6.3558 8.7798 c
3.61 8.7798 l
3.61 13.39 l
6.3558 13.39 l
6.3558 13.39 l
h
18.067661 16.5256 m
18.067661 16.71204 17.932072 16.86458 17.745632 16.86458 c
12.796433 16.86458 l
12.626943 16.86458 12.457453 16.728991 12.457453 16.542379 c
12.457453 15.101679 l
12.457453 14.898289 12.609993 14.762699 12.796433 14.762699 c
17.745632 14.762699 l
17.932072 14.762699 18.067661 14.881339 18.067661 15.084729 c
18.067661 16.52553 l
18.067661 16.5256 l
h
25.355762 6.441 m
28.169363 6.441 30.016762 8.9834 30.016762 11.0681 c
30.016762 13.3054 28.169262 15.7291 25.355762 15.7291 c
22.355762 15.7291 l
22.355762 19.661301 l
22.355762 19.864691 22.220173 20.000111 22.033733 20.000111 c
20.237133 20.000111 l
20.067642 20.000111 19.932053 19.864681 19.932053 19.661301 c
19.932053 6.763301 l
19.932053 6.593811 20.067642 6.441271 20.254082 6.441271 c
25.355782 6.441271 l
25.355762 6.441 l
h
25.101563 13.39 m
26.694763 13.39 27.593063 12.220301 27.593063 11.067801 c
27.593063 9.932401 26.694754 8.7798 25.101563 8.7798 c
22.355762 8.7798 l
22.355762 13.39 l
25.101563 13.39 l
h
49.169422 6.441 m
49.355862 6.441 49.559742 6.59321 49.458054 6.83049 c
43.068054 19.83049 l
43.000256 19.96608 42.864666 20.08456 42.712296 20.08456 c
42.576706 20.08456 l
42.407215 20.08456 42.271626 19.96608 42.203827 19.83049 c
40.220726 15.66099 l
38.220726 19.83049 l
38.152927 19.96608 38.034286 20.08456 37.864628 20.08456 c
37.729038 20.08456 l
37.559547 20.08456 37.423958 19.96608 37.373108 19.83049 c
30.983307 6.81349 l
30.864496 6.59332 31.084837 6.44078 31.271276 6.44078 c
33.491577 6.44078 l
33.661068 6.44078 33.745815 6.59332 33.830559 6.77976 c
37.796459 15.203461 l
38.864258 12.830561 l
35.983059 6.813661 l
35.881371 6.593491 36.084747 6.44095 36.271198 6.44095 c
38.491497 6.44095 l
38.677937 6.44095 38.762688 6.593491 38.830479 6.76298 c
40.22028 9.83078 l
41.593178 6.77998 l
41.677925 6.59354 41.762669 6.441 41.949108 6.441 c
44.152508 6.441 l
44.355896 6.441 44.559288 6.59354 44.440647 6.83083 c
41.576248 12.83083 l
42.644047 15.20373 l
46.593048 6.76303 l
46.677795 6.59354 46.762539 6.441 46.948978 6.441 c
49.169277 6.441 l
49.169422 6.441 l
h
55.745556 6.441 m
60.152355 6.441 62.711655 9.9834 62.711655 13.1698 c
62.711655 16.779999 60.135353 20.000099 55.745556 20.000099 c
51.270958 20.000099 l
51.084518 20.000099 50.931976 19.847719 50.931976 19.661289 c
50.931976 6.76329 l
50.931976 6.5938 51.067566 6.441259 51.254005 6.441259 c
55.745506 6.441259 l
55.745556 6.441 l
h
55.745556 17.6612 m
58.542156 17.6612 60.220154 15.4746 60.203156 13.152599 c
60.203156 10.864599 58.609955 8.7799 55.745556 8.7799 c
53.338757 8.7799 l
53.355705 17.661301 l
55.745506 17.661301 l
55.745556 17.6612 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
